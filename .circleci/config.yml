# Copyright 2020 - Offen Authors <hioffen@posteo.de>
# SPDX-License-Identifier: Apache-2.0

version: 2.1

jobs:
  server:
    docker:
      - image: circleci/golang:1.14
    working_directory: ~/offen/server
    steps:
      - checkout:
          path: ~/offen
      - restore_cache:
          key: offen-server-{{ checksum "go.mod" }}
      - run:
          name: Download modules
          command: go mod download
      - save_cache:
          paths:
            - /go/pkg/mod
          key: offen-server-{{ checksum "go.mod" }}
      - run:
          name: Run tests
          command: make test

  vault:
    docker:
      - image: circleci/node:14-browsers
    working_directory: ~/offen/vault
    steps:
      - test_node_app:
          app: vault

  script:
    docker:
      - image: circleci/node:14-browsers
    working_directory: ~/offen/script
    steps:
      - test_node_app:
          app: script

  auditorium:
    docker:
      - image: circleci/node:14-browsers
    working_directory: ~/offen/auditorium
    steps:
      - test_node_app:
          app: auditorium

  packages:
    docker:
      - image: circleci/node:14-browsers
    working_directory: ~/offen/packages
    steps:
      - test_node_app:
          app: packages

  reuse:
    docker:
      - image: fsfe/reuse:latest-extra
    working_directory: ~/offen
    steps:
      - checkout:
          path: ~/offen
      - run:
          name: Check for REUSE compliance
          command: reuse lint

  build:
    docker:
      - image: circleci/python:3.7
    working_directory: ~/offen
    environment:
      DOCKER_LOGIN: offen
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Set revision
          command: |
            if [ -z "$CIRCLE_TAG" ]; then
              echo 'export OFFEN_GIT_REVISION=$(git rev-parse --short HEAD)' >> $BASH_ENV
            else
              echo 'export OFFEN_GIT_REVISION=$CIRCLE_TAG' >> $BASH_ENV
            fi
      - run:
          name: Build binaries
          command: |
            if [ -z "$CIRCLE_TAG" ] && [ "${CIRCLE_BRANCH}" != "development" ] && [ "${CIRCLE_BRANCH}" != "master" ]; then
              make build
            else
              TARGETS=linux/amd64,windows/amd64 make build
              # Darwin builds cannot be statically linked right now
              # so we override the default LDFLAGS value
              TARGETS=darwin/amd64 LDFLAGS='' make build
            fi
      - persist_to_workspace:
          root: ~/offen
          paths:
            - bin/*

  integration_sqlite:
    docker:
      - image: circleci/node:14-browsers
        environment: &integration_env
          CYPRESS_BASE_URL: http://localhost:3000
          CYPRESS_OPERATOR_USERNAME: circle@offen.dev
          CYPRESS_OPERATOR_PASSWORD: secret
          CYPRESS_ACCOUNT_ID: 9b63c4d8-65c0-438c-9d30-cc4b01173393
          CYPRESS_RUN_LIGHTHOUSE_AUDIT: 1
          OFFEN_SERVER_PORT: 3000
          OFFEN_DATABASE_CONNECTIONSTRING: /tmp/offen.sqlite3
    working_directory: ~/offen
    steps:
      - run:
          name: Create db file
          command: |
            touch /tmp/offen.sqlite3
      - run_integration_tests

  integration_postgres:
    docker:
      - image: circleci/node:14-browsers
        environment:
          <<: *integration_env
          OFFEN_DATABASE_DIALECT: postgres
          OFFEN_DATABASE_CONNECTIONSTRING: postgres://circle:test@localhost:5432/circle_test?sslmode=disable
      - image: circleci/postgres:11.2-alpine
        environment:
          POSTGRES_USER: circle
          POSTGRES_PASSWORD: test
    working_directory: ~/offen
    steps:
      - wait_for:
          service: Postgres
          port: 5432
      - run_integration_tests

  integration_mysql:
    docker:
      - image: circleci/node:14-browsers
        environment:
          <<: *integration_env
          OFFEN_DATABASE_DIALECT: mysql
          OFFEN_DATABASE_CONNECTIONSTRING: root:test@tcp(localhost:3306)/circle_test?parseTime=true
      - image: circleci/mysql:5.7
        environment:
          MYSQL_DATABASE: circle_test
          MYSQL_ROOT_PASSWORD: test
    working_directory: ~/offen
    steps:
      - wait_for:
          service: MySQL
          port: 3306
      - run_integration_tests

  release:
    docker:
      - image: circleci/python:3.7
    working_directory: ~/offen
    environment:
      DOCKER_LOGIN: offen
    steps:
      - checkout
      - setup_remote_docker
      - aws-cli/install
      - attach_workspace:
          at: ~/offen
      - run:
          name: Set image tag
          command: |
            if [ -z "$CIRCLE_TAG" ]; then
              if [ "${CIRCLE_BRANCH}" == "master" ]; then
                echo 'export DOCKER_IMAGE_TAG="stable"' >> $BASH_ENV
              else
                echo 'export DOCKER_IMAGE_TAG="latest"' >> $BASH_ENV
              fi
            else
              echo 'export DOCKER_IMAGE_TAG=$CIRCLE_TAG' >> $BASH_ENV
            fi
      - run:
          name: Build Docker image
          command: |
            make build-docker
      - run:
          name: Download and import signing key
          command: |
            aws s3 cp s3://offen-secrets/signing-key.asc /tmp
            gpg --import /tmp/signing-key.asc
      - run:
          name: Package tarball
          working_directory: ~/offen/bin
          command: |
            for artifact in $(ls); do
              gpg --armor --detach-sign $artifact
            done

            md5sum * > checksums.txt

            cp ~/offen/{LICENSE,README.md} .

            mkdir -p /tmp/artifacts
            tar -czvf /tmp/artifacts/offen-$DOCKER_IMAGE_TAG.tar.gz $(ls -A)
      - run:
          name: Upload to S3
          command: aws s3 cp /tmp/artifacts/offen-$DOCKER_IMAGE_TAG.tar.gz s3://offen/binaries/offen-$DOCKER_IMAGE_TAG.tar.gz
      - docker/install-docker-credential-helper
      - docker/configure-docker-credentials-store
      - run:
          name: Push offen/offen to Docker Hub
          command: |
            echo "$DOCKER_ACCESSTOKEN" | docker login --username $DOCKER_LOGIN --password-stdin
            docker push offen/offen:$DOCKER_IMAGE_TAG
      - store_artifacts:
          path: /tmp/artifacts

  release_docs:
    docker:
      - image: cimg/python:3.7
        environment:
          BUCKET: offen-docs
          DISTRIBUTION: E2Q11JP684XRCO
    working_directory: ~/offen
    steps:
      - checkout
      - setup_remote_docker
      - aws-cli/install
      - run:
          name: Build and deploy versioned docs site
          command: |
            if [ -z "$CIRCLE_TAG" ]; then
              if [ "${CIRCLE_BRANCH}" == "master" ]; then
                echo "offen_version: stable" >> ./docs/_override.yml
                echo "baseurl: v/stable" >> ./docs/_override.yml
                make build-docs
                aws s3api put-object --bucket $BUCKET --key /v/stable/
                aws s3 sync --delete ./docs-site/. s3://$BUCKET/v/stable/
              else
                echo "offen_version: latest" >> ./docs/_override.yml
                echo "baseurl: v/latest" >> ./docs/_override.yml
                make build-docs
                aws s3api put-object --bucket $BUCKET --key /v/latest/
                aws s3 sync --delete ./docs-site/. s3://$BUCKET/v/latest/
              fi
            else
              # a tagged build gets built an deployed twice:
              # - once as the root version in /
              # - once as the tagged version in /$TAG/
              echo "offen_version: $CIRCLE_TAG" >> ./docs/_override.yml
              make build-docs
              aws s3 cp ./docs/robots.txt s3://$BUCKET
              aws s3 sync --delete ./docs-site/. s3://$BUCKET --exclude 'v/*'

              echo "baseurl: v/$CIRCLE_TAG" >> ./docs/_override.yml
              make build-docs
              aws s3api put-object --bucket $BUCKET --key /v/$CIRCLE_TAG/
              aws s3 sync --delete ./docs-site/. s3://$BUCKET/v/$CIRCLE_TAG/
            fi
      - run:
          name: Invalidate Cloudfront distribution
          command: aws cloudfront create-invalidation --distribution-id $DISTRIBUTION --paths "/*"

workflows:
  version: 2
  test_build_push:
    jobs:
      - server: &all_tags_filter
          filters:
            tags:
              only: /.*/
      - vault:
          <<: *all_tags_filter
      - script:
          <<: *all_tags_filter
      - auditorium:
          <<: *all_tags_filter
      - packages:
          <<: *all_tags_filter
      - reuse:
          <<: *all_tags_filter
      - build:
          <<: *all_tags_filter
      - integration_sqlite:
          <<: *all_tags_filter
          requires:
            - build
      - integration_postgres:
          <<: *all_tags_filter
          requires:
            - build
      - integration_mysql:
          <<: *all_tags_filter
          requires:
            - build

      - release: &default_release_job
          context: AWS
          requires:
            - server
            - vault
            - script
            - auditorium
            - packages
            - reuse
            - integration_postgres
            - integration_mysql
            - integration_sqlite
            - build
          filters:
            tags:
              only: /^v.*/ # tagged release from master branch
            branches:
              only:
                - development
                - master
      - release_docs:
          <<: *default_release_job

commands:
  wait_for:
    description: Wait for a service on a port to be ready
    parameters:
      service:
        type: string
        default: service
      port:
        type: integer
    steps:
      - run:
          name: Waiting for << parameters.service >> to be ready
          command: |
            for i in `seq 1 10`;
            do
              nc -z localhost << parameters.port >> && echo Success && exit 0
              echo -n .
              sleep 1
            done
            echo Failed waiting for << parameters.service >> && exit 1
  run_integration_tests:
    steps:
      - checkout
      - attach_workspace:
          at: ~/offen
      - run:
          name: Setup application
          command: |
            cp ./bin/offen-linux-amd64 ./offen
            touch offen.env
            ./offen setup -email $CYPRESS_OPERATOR_USERNAME -name circle -password $CYPRESS_OPERATOR_PASSWORD -populate -forceid $CYPRESS_ACCOUNT_ID
      - run:
          name: Serve application
          command:  ./offen
          background: true
      - wait_for:
          service: Offen
          port: 3000
      - restore_cache:
          key: offen-integration-cy4.5.0-{{ checksum "./integration/package.json" }}
      - run:
          name: Install cypress and dependencies
          working_directory: ~/offen/integration
          command: |
            mkdir -p ~/.npm-global
            npm config set prefix '~/.npm-global'
            npm install cypress@4.5.0 -g
            npm ci
            echo 'export PATH=~/.npm-global/bin/:$PATH' >> $BASH_ENV
      - save_cache:
          paths:
            - ~/offen/integration/node_modules
            - ~/.cache/Cypress
            - ~/.npm-global
          key: offen-integration-cy4.5.0-{{ checksum "./integration/package.json" }}-{{ epoch }}
      - run:
          working_directory: ~/offen/integration
          name: Run integration tests
          command: npm t
      - store_artifacts:
          path: ~/offen/integration/cypress/screenshots

  test_node_app:
    description: Run unit tests for a Node.js based subapp
    parameters:
      app:
        type: string
      checkout:
        type: string
        default: ~/offen
    steps:
      - checkout:
          path: << parameters.checkout >>
      - restore_cache:
          key: offen-<< parameters.app >>-{{ checksum "package.json" }}
      - run:
          name: Install dependencies
          command: npm ci
      - save_cache:
          paths:
            - ~/offen/<< parameters.app >>/node_modules
          key: offen-<< parameters.app >>-{{ checksum "package.json" }}
      - run:
          name: Run tests
          command: npm test

orbs:
  aws-cli: circleci/aws-cli@1.0.0
  docker: circleci/docker@1.0.1
